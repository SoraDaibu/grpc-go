/*
In this exercise, your goal is to implement
a PrimeNumberDecomposition RPC Server Streaming API in a CalculatorService:

The function takes a Request message that has one integer,
and returns a stream of Responses that represent the prime number
decomposition of that number (see below for the algorithm).

Remember to first implement the service definition in
a .proto file, alongside the RPC messages
Implement the Server code first
Test the server code by implementing the Client
Example:

The client will send one number (120) and the server will respond with a stream of (2,2,2,3,5), because 120=2*2*2*3*5

Algorithm (pseudo code):

k = 2
N = 210
while N > 1:
    if N % k == 0:   // if k evenly divides into N
        print k      // this is a factor
        N = N / k    // divide N by k so that we have the rest of the number left.
    else:
        k = k + 1

Good luck!*/

syntax = "proto3";
package calculator;
option go_package="calculatorpb";

message Calculator {
  int32 first_num = 1;
  int32 second_num = 2;
}

message CalculateRequest {
  Calculator calculator = 1;
}

message CalculateResponse {
  int32 result = 1;
}

message DecomposeRequest {
  int32 number = 1;
}

message DecomposeResponse {
  int32 decomposed_num = 1;
}

service CalculatorService {
  // Unary
  rpc Calculate (CalculateRequest) returns (CalculateResponse);

  // Server Streaming
  rpc DecomposeManyTimes(DecomposeRequest) returns (stream DecomposeResponse) {};
}
